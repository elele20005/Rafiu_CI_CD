import { type CtrfEnvironment, type CtrfTest } from '../types/ctrf';
import { type TestAttempt, type CypressTest } from '../types/cypress';
interface ReporterConfigOptions {
    on: any;
    outputFile?: string;
    outputDir?: string;
    minimal?: boolean;
    screenshot?: boolean;
    testType?: string;
    appName?: string | undefined;
    appVersion?: string | undefined;
    osPlatform?: string | undefined;
    osRelease?: string | undefined;
    osVersion?: string | undefined;
    buildName?: string | undefined;
    buildNumber?: string | undefined;
    buildUrl?: string | undefined;
    repositoryName?: string | undefined;
    repositoryUrl?: string | undefined;
    branchName?: string | undefined;
    testEnvironment?: string | undefined;
}
export declare class GenerateCtrfReport {
    private readonly ctrfReport;
    readonly ctrfEnvironment: CtrfEnvironment;
    readonly reporterConfigOptions: ReporterConfigOptions;
    readonly reporterName = "cypress-ctrf-json-reporter";
    readonly defaultOutputFile = "ctrf-report.json";
    readonly defaultOutputDir = "ctrf";
    runStart: number;
    runStop: number;
    filename: string;
    browser: string;
    constructor(reporterOptions: ReporterConfigOptions);
    private setFilename;
    private validateOptions;
    private setEventHandlers;
    private updateCtrfResultsFromAfterSpecResults;
    private updateCtrfTotalsFromAfterRun;
    setEnvironmentDetails(reporterConfigOptions: ReporterConfigOptions): void;
    hasEnvironmentDetails(environment: CtrfEnvironment): boolean;
    extractFailureDetails(testResult: CypressTest, lastAttempt?: TestAttempt): Partial<CtrfTest>;
    private writeReportToFile;
}
export {};
