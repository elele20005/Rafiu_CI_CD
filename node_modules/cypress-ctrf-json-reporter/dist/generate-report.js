"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateCtrfReport = void 0;
const fs = require("fs");
const path = require("path");
class GenerateCtrfReport {
    constructor(reporterOptions) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        this.reporterName = 'cypress-ctrf-json-reporter';
        this.defaultOutputFile = 'ctrf-report.json';
        this.defaultOutputDir = 'ctrf';
        this.runStart = 0;
        this.runStop = 0;
        this.filename = this.defaultOutputFile;
        this.browser = '';
        this.reporterConfigOptions = {
            on: reporterOptions.on,
            outputFile: (_a = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.outputFile) !== null && _a !== void 0 ? _a : this.defaultOutputFile,
            outputDir: (_b = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.outputDir) !== null && _b !== void 0 ? _b : this.defaultOutputDir,
            minimal: (_c = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.minimal) !== null && _c !== void 0 ? _c : false,
            testType: (_d = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.testType) !== null && _d !== void 0 ? _d : 'e2e',
            appName: (_e = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.appName) !== null && _e !== void 0 ? _e : undefined,
            appVersion: (_f = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.appVersion) !== null && _f !== void 0 ? _f : undefined,
            osPlatform: (_g = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.osPlatform) !== null && _g !== void 0 ? _g : undefined,
            osRelease: (_h = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.osRelease) !== null && _h !== void 0 ? _h : undefined,
            osVersion: (_j = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.osVersion) !== null && _j !== void 0 ? _j : undefined,
            buildName: (_k = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.buildName) !== null && _k !== void 0 ? _k : undefined,
            buildNumber: (_l = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.buildNumber) !== null && _l !== void 0 ? _l : undefined,
            buildUrl: (_m = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.buildUrl) !== null && _m !== void 0 ? _m : undefined,
            repositoryName: (_o = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.repositoryName) !== null && _o !== void 0 ? _o : undefined,
            repositoryUrl: (_p = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.repositoryUrl) !== null && _p !== void 0 ? _p : undefined,
            branchName: (_q = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.branchName) !== null && _q !== void 0 ? _q : undefined,
            testEnvironment: (_r = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.testEnvironment) !== null && _r !== void 0 ? _r : undefined,
        };
        this.ctrfReport = {
            results: {
                tool: {
                    name: 'cypress',
                },
                summary: {
                    tests: 0,
                    passed: 0,
                    failed: 0,
                    pending: 0,
                    skipped: 0,
                    other: 0,
                    start: 0,
                    stop: 0,
                },
                tests: [],
            },
        };
        this.validateOptions();
        if (this.reporterConfigOptions.outputFile !== undefined)
            this.setFilename(this.reporterConfigOptions.outputFile);
        this.ctrfEnvironment = {};
        if (((_s = this.reporterConfigOptions) === null || _s === void 0 ? void 0 : _s.outputFile) !== undefined)
            this.setFilename(this.reporterConfigOptions.outputFile);
        if (!fs.existsSync((_t = this.reporterConfigOptions.outputDir) !== null && _t !== void 0 ? _t : this.defaultOutputDir)) {
            fs.mkdirSync((_u = this.reporterConfigOptions.outputDir) !== null && _u !== void 0 ? _u : this.defaultOutputDir, { recursive: true });
        }
        this.setEventHandlers();
    }
    setFilename(filename) {
        if (filename.endsWith('.json')) {
            this.filename = filename;
        }
        else {
            this.filename = `${filename}.json`;
        }
    }
    validateOptions() {
        if (this.reporterConfigOptions.on === false) {
            throw new Error('Missing required option: on');
        }
    }
    setEventHandlers() {
        this.reporterConfigOptions.on('before:run', (config) => {
            var _a;
            this.runStart = Date.now();
            this.browser = `${config.browser.name} ${config.browser.version}`;
            this.setEnvironmentDetails((_a = this.reporterConfigOptions) !== null && _a !== void 0 ? _a : {});
            if (this.hasEnvironmentDetails(this.ctrfEnvironment)) {
                this.ctrfReport.results.environment = this.ctrfEnvironment;
            }
        });
        this.reporterConfigOptions.on('after:spec', (_spec, results) => {
            this.updateCtrfResultsFromAfterSpecResults(results);
        });
        this.reporterConfigOptions.on('after:run', (run) => {
            this.runStop = Date.now();
            this.updateCtrfTotalsFromAfterRun(run);
            this.writeReportToFile(this.ctrfReport);
        });
    }
    updateCtrfResultsFromAfterSpecResults(cypressResults) {
        cypressResults.tests.forEach((test) => {
            var _a, _b, _c, _d, _e, _f;
            const latestAttempt = (_a = test.attempts) === null || _a === void 0 ? void 0 : _a[test.attempts.length - 1];
            const durationValue = typeof test.duration === 'number'
                ? test.duration
                : (_b = latestAttempt === null || latestAttempt === void 0 ? void 0 : latestAttempt.wallClockDuration) !== null && _b !== void 0 ? _b : 0;
            const attemptsLength = (_d = (_c = test.attempts) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;
            const isFlaky = test.state === 'passed' && attemptsLength > 1;
            const ctrfTest = {
                name: test.title.join(' '),
                status: test.state,
                duration: durationValue,
            };
            if (this.reporterConfigOptions.minimal === false) {
                if (test.state === 'failed') {
                    const failureDetails = this.extractFailureDetails(test, latestAttempt);
                    ctrfTest.message = failureDetails.message;
                    ctrfTest.trace = failureDetails.trace;
                }
                ctrfTest.rawStatus = test.state;
                ctrfTest.type = (_e = this.reporterConfigOptions.testType) !== null && _e !== void 0 ? _e : 'e2e';
                ctrfTest.filePath = (_f = cypressResults.spec) === null || _f === void 0 ? void 0 : _f.relative;
                ctrfTest.retries = attemptsLength - 1;
                ctrfTest.flaky = isFlaky;
                ctrfTest.browser = this.browser;
            }
            this.ctrfReport.results.tests.push(ctrfTest);
        });
    }
    updateCtrfTotalsFromAfterRun(run) {
        this.ctrfReport.results.summary = {
            tests: run.totalTests,
            failed: run.totalFailed,
            passed: run.totalPassed,
            skipped: run.totalSkipped,
            pending: run.totalPending,
            other: 0,
            start: this.runStart,
            stop: this.runStop,
        };
    }
    setEnvironmentDetails(reporterConfigOptions) {
        if (reporterConfigOptions.appName !== undefined) {
            this.ctrfEnvironment.appName = reporterConfigOptions.appName;
        }
        if (reporterConfigOptions.appVersion !== undefined) {
            this.ctrfEnvironment.appVersion = reporterConfigOptions.appVersion;
        }
        if (reporterConfigOptions.osPlatform !== undefined) {
            this.ctrfEnvironment.osPlatform = reporterConfigOptions.osPlatform;
        }
        if (reporterConfigOptions.osRelease !== undefined) {
            this.ctrfEnvironment.osRelease = reporterConfigOptions.osRelease;
        }
        if (reporterConfigOptions.osVersion !== undefined) {
            this.ctrfEnvironment.osVersion = reporterConfigOptions.osVersion;
        }
        if (reporterConfigOptions.buildName !== undefined) {
            this.ctrfEnvironment.buildName = reporterConfigOptions.buildName;
        }
        if (reporterConfigOptions.buildNumber !== undefined) {
            this.ctrfEnvironment.buildNumber = reporterConfigOptions.buildNumber;
        }
        if (reporterConfigOptions.buildUrl !== undefined) {
            this.ctrfEnvironment.buildUrl = reporterConfigOptions.buildUrl;
        }
        if (reporterConfigOptions.repositoryName !== undefined) {
            this.ctrfEnvironment.repositoryName = reporterConfigOptions.repositoryName;
        }
        if (reporterConfigOptions.repositoryUrl !== undefined) {
            this.ctrfEnvironment.repositoryUrl = reporterConfigOptions.repositoryUrl;
        }
        if (reporterConfigOptions.branchName !== undefined) {
            this.ctrfEnvironment.branchName = reporterConfigOptions.branchName;
        }
        if (reporterConfigOptions.testEnvironment !== undefined) {
            this.ctrfEnvironment.testEnvironment =
                reporterConfigOptions.testEnvironment;
        }
    }
    hasEnvironmentDetails(environment) {
        return Object.keys(environment).length > 0;
    }
    extractFailureDetails(testResult, lastAttempt) {
        const failureDetails = {};
        if ((lastAttempt === null || lastAttempt === void 0 ? void 0 : lastAttempt.error) !== undefined &&
            (lastAttempt === null || lastAttempt === void 0 ? void 0 : lastAttempt.error) !== null &&
            'message' in lastAttempt.error &&
            'stack' in lastAttempt.error) {
            failureDetails.message = lastAttempt.error.message;
            failureDetails.trace = lastAttempt.error.stack;
        }
        else if (typeof testResult.displayError === 'string' &&
            testResult.displayError.trim().length > 0) {
            failureDetails.message = testResult.displayError;
            failureDetails.trace = testResult.displayError;
        }
        return failureDetails;
    }
    writeReportToFile(data) {
        var _a, _b;
        const filePath = path.join((_a = this.reporterConfigOptions.outputDir) !== null && _a !== void 0 ? _a : this.defaultOutputDir, (_b = this.reporterConfigOptions.outputFile) !== null && _b !== void 0 ? _b : this.defaultOutputFile);
        const str = JSON.stringify(data, null, 2);
        try {
            fs.writeFileSync(filePath, str + '\n');
            console.log(`${this.reporterName}: successfully written ctrf json to %s/%s`, this.reporterConfigOptions.outputDir, this.reporterConfigOptions.outputFile);
        }
        catch (error) {
            console.error(`Error writing ctrf json report:, ${String(error)}`);
        }
    }
}
exports.GenerateCtrfReport = GenerateCtrfReport;
